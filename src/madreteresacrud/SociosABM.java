/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package madreteresacrud;

import utilidades.RendererTablaSocios;
import java.awt.Color;
import java.awt.Frame;
import java.awt.Toolkit;
import java.beans.Beans;
import java.sql.Connection;
import java.sql.SQLException;
import java.sql.Statement;
import java.text.DateFormat;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Calendar;
import java.util.Date;
import java.util.List;
import java.util.regex.Matcher;
import java.util.regex.Pattern;
import javax.persistence.EntityManager;
import javax.persistence.Query;
import javax.persistence.RollbackException;
import javax.swing.JDialog;
import javax.swing.JFrame;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.SwingUtilities;
import org.jdesktop.beansbinding.Converter;
import org.jdesktop.swingx.autocomplete.AutoCompleteDecorator;
import reportes.ConexionBD;
import utilidades.BuscarAdherente;
import utilidades.Busquedas;
import utilidades.Calendario;
import utilidades.Localidades;
import utilidades.UtilGraficos;

/**
 *
 * @author Francis
 */
public class SociosABM extends JPanel {

    private static EntityManager em;
    private static boolean activo;

    public SociosABM() {
        initComponents();
//        refreshButton.setVisible(false);
        //Ocultamos la columna Sexo
        masterTable.getColumnModel().getColumn(4).setMaxWidth(0);
        masterTable.getColumnModel().getColumn(4).setMinWidth(0);
        masterTable.getColumnModel().getColumn(4).setPreferredWidth(0);
        //ocultamos el cuil
        masterTable.getColumnModel().getColumn(5).setMaxWidth(0);
        masterTable.getColumnModel().getColumn(5).setMinWidth(0);
        masterTable.getColumnModel().getColumn(5).setPreferredWidth(0);
        //ocultamos la columna fecha nacimiento
        masterTable.getColumnModel().getColumn(6).setMaxWidth(0);
        masterTable.getColumnModel().getColumn(6).setMinWidth(0);
        masterTable.getColumnModel().getColumn(6).setPreferredWidth(0);
        //ocultamos la columna de email
        masterTable.getColumnModel().getColumn(9).setMaxWidth(0);
        masterTable.getColumnModel().getColumn(9).setMinWidth(0);
        masterTable.getColumnModel().getColumn(9).setPreferredWidth(0);
        //Ocultamos la localidad
        masterTable.getColumnModel().getColumn(10).setMaxWidth(0);
        masterTable.getColumnModel().getColumn(10).setMinWidth(0);
        masterTable.getColumnModel().getColumn(10).setPreferredWidth(0);
        //Ocultamos el tipo de socio
        masterTable.getColumnModel().getColumn(12).setMaxWidth(0);
        masterTable.getColumnModel().getColumn(12).setMinWidth(0);
        masterTable.getColumnModel().getColumn(12).setPreferredWidth(0);
        //Ocultamos la fecha de baja
//        masterTable.getColumnModel().getColumn(13).setMaxWidth(0);
//        masterTable.getColumnModel().getColumn(13).setMinWidth(0);
//        masterTable.getColumnModel().getColumn(13).setPreferredWidth(0);
        //ocultamos el id de socio
        masterTable.getColumnModel().getColumn(14).setMaxWidth(0);
        masterTable.getColumnModel().getColumn(14).setMinWidth(0);
        masterTable.getColumnModel().getColumn(14).setPreferredWidth(0);

        masterTable.getColumnModel().getColumn(15).setMaxWidth(0);
        masterTable.getColumnModel().getColumn(15).setMinWidth(0);
        masterTable.getColumnModel().getColumn(15).setPreferredWidth(0);

        masterTable.setDefaultRenderer(Object.class, new RendererTablaSocios(13));
//        if(masterTable.getRowCount()>0){
//            masterTable.changeSelection(1, 1, false, false);
//        }
        //Deshabilitamos el combo tipo socio
        jComboTipSoc.setEnabled(false);

        setComboTipoSocio();
        setBusqueda();
        setComboSexo();
        setComboLocalidades();

        jLEliminado.setVisible(false);
        jLabelBaja.setVisible(false);
        jLabelSocio.setText("true");
        jLabelSocio.setVisible(false);

        if (!Beans.isDesignTime()) {
            entityManager.getTransaction().begin();
        }
    }

    public SociosABM(String numDoc) {
        entityManager = java.beans.Beans.isDesignTime() ? null : javax.persistence.Persistence.createEntityManagerFactory("madreTeresaCRUDPU").createEntityManager();
        query = java.beans.Beans.isDesignTime() ? null : entityManager.createQuery("SELECT s FROM Socios s WHERE s.documento=" + numDoc + " AND s.eliminado=false");
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor. WHERE s.eliminado=false ORDER BY
     * s.apellido
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {
        bindingGroup = new org.jdesktop.beansbinding.BindingGroup();

        entityManager = java.beans.Beans.isDesignTime() ? null : javax.persistence.Persistence.createEntityManagerFactory("madreTeresaCRUDPU").createEntityManager();
        query = java.beans.Beans.isDesignTime() ? null : entityManager.createQuery("SELECT s FROM Socios s WHERE s.socio=true ORDER BY s.apellido");
        list = java.beans.Beans.isDesignTime() ? java.util.Collections.emptyList() : org.jdesktop.observablecollections.ObservableCollections.observableList(query.getResultList());
        jPanelForm = new javax.swing.JPanel();
        apellidoLabel = new javax.swing.JLabel();
        apellidoField = new javax.swing.JTextField();
        nombreLabel = new javax.swing.JLabel();
        nombreField = new javax.swing.JTextField();
        documentoLabel = new javax.swing.JLabel();
        sexoLabel = new javax.swing.JLabel();
        emailLabel = new javax.swing.JLabel();
        telefonoLabel = new javax.swing.JLabel();
        fechaNacimientoLabel = new javax.swing.JLabel();
        localidadLabel = new javax.swing.JLabel();
        direccionLabel = new javax.swing.JLabel();
        emailField = new javax.swing.JTextField();
        telefonoField = new javax.swing.JTextField();
        fechaNacimientoField = new javax.swing.JTextField();
        direccionField = new javax.swing.JTextField();
        cuilField = new javax.swing.JTextField();
        cuilLabel = new javax.swing.JLabel();
        numSocLabel = new javax.swing.JLabel();
        numSocField = new javax.swing.JTextField();
        tipoSocioLabel = new javax.swing.JLabel();
        jComboTipSoc = new javax.swing.JComboBox();
        jCBSexo = new javax.swing.JComboBox();
        jButtonFecha = new javax.swing.JButton();
        refreshButton = new javax.swing.JButton();
        saveButton = new javax.swing.JButton();
        jLEliminado = new javax.swing.JLabel();
        documentoField = new javax.swing.JTextField();
        celularLabel = new javax.swing.JLabel();
        celularField = new javax.swing.JTextField();
        jLabelBaja = new javax.swing.JLabel();
        jLabelSocio = new javax.swing.JLabel();
        jCBLocalididad = new javax.swing.JComboBox();
        jPanelTabla = new javax.swing.JPanel();
        masterScrollPane = new javax.swing.JScrollPane();
        masterTable = new javax.swing.JTable();
        newButton = new javax.swing.JButton();
        deleteButton = new javax.swing.JButton();
        jLabelBuscar = new javax.swing.JLabel();
        jButtonBuscar = new javax.swing.JButton();
        jBVerCuotas = new javax.swing.JButton();
        jButtonAlta = new javax.swing.JButton();
        jLabel2 = new javax.swing.JLabel();
        jCBBusqueda = new javax.swing.JComboBox();

        FormListener formListener = new FormListener();

        jPanelForm.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        jPanelForm.setEnabled(false);

        apellidoLabel.setText("Apellido/s:");

        org.jdesktop.beansbinding.Binding binding = org.jdesktop.beansbinding.Bindings.createAutoBinding(org.jdesktop.beansbinding.AutoBinding.UpdateStrategy.READ_WRITE, masterTable, org.jdesktop.beansbinding.ELProperty.create("${selectedElement.apellido}"), apellidoField, org.jdesktop.beansbinding.BeanProperty.create("text"));
        binding.setSourceUnreadableValue("null");
        binding.setConverter(Busquedas.converterMayuscula());
        bindingGroup.addBinding(binding);
        binding = org.jdesktop.beansbinding.Bindings.createAutoBinding(org.jdesktop.beansbinding.AutoBinding.UpdateStrategy.READ, masterTable, org.jdesktop.beansbinding.ELProperty.create("${selectedElement != null}"), apellidoField, org.jdesktop.beansbinding.BeanProperty.create("enabled"));
        bindingGroup.addBinding(binding);

        nombreLabel.setText("Nombre/s:");

        binding = org.jdesktop.beansbinding.Bindings.createAutoBinding(org.jdesktop.beansbinding.AutoBinding.UpdateStrategy.READ_WRITE, masterTable, org.jdesktop.beansbinding.ELProperty.create("${selectedElement.nombre}"), nombreField, org.jdesktop.beansbinding.BeanProperty.create("text"));
        binding.setSourceUnreadableValue("null");
        binding.setConverter(Busquedas.converterMayuscula());
        bindingGroup.addBinding(binding);
        binding = org.jdesktop.beansbinding.Bindings.createAutoBinding(org.jdesktop.beansbinding.AutoBinding.UpdateStrategy.READ, masterTable, org.jdesktop.beansbinding.ELProperty.create("${selectedElement != null}"), nombreField, org.jdesktop.beansbinding.BeanProperty.create("enabled"));
        bindingGroup.addBinding(binding);

        documentoLabel.setText("DNI:");

        sexoLabel.setText("Sexo");

        emailLabel.setText("Email:");

        telefonoLabel.setText("Tel√©fono:");

        fechaNacimientoLabel.setText( "<html>Fecha de<P>" +
            "<html>Nacimiento:<P>");

        localidadLabel.setText("Localidad:");

        direccionLabel.setText("Direcci√≥n:");

        emailField.setToolTipText("Deber√≠a ser de la forma \"nombre@dominio.com\"");

        binding = org.jdesktop.beansbinding.Bindings.createAutoBinding(org.jdesktop.beansbinding.AutoBinding.UpdateStrategy.READ_WRITE, masterTable, org.jdesktop.beansbinding.ELProperty.create("${selectedElement.email}"), emailField, org.jdesktop.beansbinding.BeanProperty.create("text"));
        binding.setSourceUnreadableValue("null");
        binding.setConverter(Busquedas.converterMayuscula());
        bindingGroup.addBinding(binding);
        binding = org.jdesktop.beansbinding.Bindings.createAutoBinding(org.jdesktop.beansbinding.AutoBinding.UpdateStrategy.READ, masterTable, org.jdesktop.beansbinding.ELProperty.create("${selectedElement != null}"), emailField, org.jdesktop.beansbinding.BeanProperty.create("enabled"));
        bindingGroup.addBinding(binding);

        emailField.addFocusListener(formListener);

        telefonoField.setToolTipText("Solo n√∫meros.");

        binding = org.jdesktop.beansbinding.Bindings.createAutoBinding(org.jdesktop.beansbinding.AutoBinding.UpdateStrategy.READ_WRITE, masterTable, org.jdesktop.beansbinding.ELProperty.create("${selectedElement.telefono}"), telefonoField, org.jdesktop.beansbinding.BeanProperty.create("text"));
        binding.setSourceUnreadableValue("null");
        bindingGroup.addBinding(binding);
        binding = org.jdesktop.beansbinding.Bindings.createAutoBinding(org.jdesktop.beansbinding.AutoBinding.UpdateStrategy.READ, masterTable, org.jdesktop.beansbinding.ELProperty.create("${selectedElement != null}"), telefonoField, org.jdesktop.beansbinding.BeanProperty.create("enabled"));
        bindingGroup.addBinding(binding);

        telefonoField.addFocusListener(formListener);
        telefonoField.addKeyListener(formListener);

        fechaNacimientoField.setEditable(false);

        binding = org.jdesktop.beansbinding.Bindings.createAutoBinding(org.jdesktop.beansbinding.AutoBinding.UpdateStrategy.READ_WRITE, masterTable, org.jdesktop.beansbinding.ELProperty.create("${selectedElement.fechaNacimiento}"), fechaNacimientoField, org.jdesktop.beansbinding.BeanProperty.create("text"));
        binding.setSourceUnreadableValue("null");
        binding.setConverter(dateConverter);
        bindingGroup.addBinding(binding);
        binding = org.jdesktop.beansbinding.Bindings.createAutoBinding(org.jdesktop.beansbinding.AutoBinding.UpdateStrategy.READ, masterTable, org.jdesktop.beansbinding.ELProperty.create("${selectedElement != null}"), fechaNacimientoField, org.jdesktop.beansbinding.BeanProperty.create("enabled"));
        bindingGroup.addBinding(binding);

        fechaNacimientoField.addMouseListener(formListener);

        binding = org.jdesktop.beansbinding.Bindings.createAutoBinding(org.jdesktop.beansbinding.AutoBinding.UpdateStrategy.READ_WRITE, masterTable, org.jdesktop.beansbinding.ELProperty.create("${selectedElement.direccion}"), direccionField, org.jdesktop.beansbinding.BeanProperty.create("text"));
        binding.setSourceUnreadableValue("null");
        binding.setConverter(Busquedas.converterMayuscula());
        bindingGroup.addBinding(binding);
        binding = org.jdesktop.beansbinding.Bindings.createAutoBinding(org.jdesktop.beansbinding.AutoBinding.UpdateStrategy.READ, masterTable, org.jdesktop.beansbinding.ELProperty.create("${selectedElement != null}"), direccionField, org.jdesktop.beansbinding.BeanProperty.create("enabled"));
        bindingGroup.addBinding(binding);

        cuilField.setToolTipText("Solo n√∫meros y \"-\".");
        cuilField.setEnabled(false);

        binding = org.jdesktop.beansbinding.Bindings.createAutoBinding(org.jdesktop.beansbinding.AutoBinding.UpdateStrategy.READ_WRITE, masterTable, org.jdesktop.beansbinding.ELProperty.create("${selectedElement.cuil}"), cuilField, org.jdesktop.beansbinding.BeanProperty.create("text"));
        bindingGroup.addBinding(binding);

        cuilField.addFocusListener(formListener);
        cuilField.addKeyListener(formListener);

        cuilLabel.setText("Cuil/Cuit:");

        numSocLabel.setText("N¬∞ Socio:");

        numSocField.setEditable(false);
        numSocField.setBackground(new java.awt.Color(153, 153, 153));
        numSocField.setToolTipText("Solo n√∫meros.");
        numSocField.setEnabled(false);

        binding = org.jdesktop.beansbinding.Bindings.createAutoBinding(org.jdesktop.beansbinding.AutoBinding.UpdateStrategy.READ_WRITE, masterTable, org.jdesktop.beansbinding.ELProperty.create("${selectedElement.numSoc}"), numSocField, org.jdesktop.beansbinding.BeanProperty.create("text"));
        bindingGroup.addBinding(binding);

        numSocField.addKeyListener(formListener);

        tipoSocioLabel.setText("Tipo de Socio:");

        jComboTipSoc.setEnabled(false);

        binding = org.jdesktop.beansbinding.Bindings.createAutoBinding(org.jdesktop.beansbinding.AutoBinding.UpdateStrategy.READ_WRITE, masterTable, org.jdesktop.beansbinding.ELProperty.create("${selectedElement.idTipoSocio}"), jComboTipSoc, org.jdesktop.beansbinding.BeanProperty.create("selectedItem"));
        binding.setSourceUnreadableValue(null);
        binding.setConverter(tipoSocioConverter);
        bindingGroup.addBinding(binding);

        jCBSexo.setMaximumRowCount(2);
        jCBSexo.setEnabled(false);

        binding = org.jdesktop.beansbinding.Bindings.createAutoBinding(org.jdesktop.beansbinding.AutoBinding.UpdateStrategy.READ_WRITE, masterTable, org.jdesktop.beansbinding.ELProperty.create("${selectedElement.sexo}"), jCBSexo, org.jdesktop.beansbinding.BeanProperty.create("selectedItem"));
        bindingGroup.addBinding(binding);

        jCBSexo.addActionListener(formListener);

        jButtonFecha.setIcon(new javax.swing.ImageIcon(getClass().getResource("/imagenes/calendario.GIF"))); // NOI18N
        jButtonFecha.setContentAreaFilled(false);
        jButtonFecha.addActionListener(formListener);

        refreshButton.setText("Cancelar");
        refreshButton.setEnabled(false);
        refreshButton.addActionListener(formListener);

        saveButton.setText("Guardar");
        saveButton.setEnabled(false);
        saveButton.addActionListener(formListener);

        jLEliminado.setFont(new java.awt.Font("Verdana", 0, 12)); // NOI18N
        jLEliminado.setForeground(java.awt.Color.red);

        binding = org.jdesktop.beansbinding.Bindings.createAutoBinding(org.jdesktop.beansbinding.AutoBinding.UpdateStrategy.READ_WRITE, masterTable, org.jdesktop.beansbinding.ELProperty.create("${selectedElement.fechaBaja}"), jLEliminado, org.jdesktop.beansbinding.BeanProperty.create("text"), "");
        binding.setConverter(dateConverter
        );
        bindingGroup.addBinding(binding);

        documentoField.setToolTipText("Solo n√∫meros con longitud m√°xima de 8 d√≠gitos. ");

        binding = org.jdesktop.beansbinding.Bindings.createAutoBinding(org.jdesktop.beansbinding.AutoBinding.UpdateStrategy.READ_WRITE, masterTable, org.jdesktop.beansbinding.ELProperty.create("${selectedElement.documento}"), documentoField, org.jdesktop.beansbinding.BeanProperty.create("text"));
        binding.setSourceUnreadableValue("null");
        bindingGroup.addBinding(binding);
        binding = org.jdesktop.beansbinding.Bindings.createAutoBinding(org.jdesktop.beansbinding.AutoBinding.UpdateStrategy.READ, masterTable, org.jdesktop.beansbinding.ELProperty.create("${selectedElement != null}"), documentoField, org.jdesktop.beansbinding.BeanProperty.create("enabled"));
        bindingGroup.addBinding(binding);

        documentoField.addKeyListener(formListener);

        celularLabel.setText("Celular:");

        celularField.setToolTipText("Solo n√∫meros.");
        celularField.setEnabled(false);

        binding = org.jdesktop.beansbinding.Bindings.createAutoBinding(org.jdesktop.beansbinding.AutoBinding.UpdateStrategy.READ_WRITE, masterTable, org.jdesktop.beansbinding.ELProperty.create("${selectedElement.celular}"), celularField, org.jdesktop.beansbinding.BeanProperty.create("text"));
        bindingGroup.addBinding(binding);

        celularField.addFocusListener(formListener);
        celularField.addKeyListener(formListener);

        jLabelBaja.setFont(new java.awt.Font("Verdana", 0, 12)); // NOI18N
        jLabelBaja.setForeground(java.awt.Color.red);
        jLabelBaja.setText("Fecha de baja:");

        binding = org.jdesktop.beansbinding.Bindings.createAutoBinding(org.jdesktop.beansbinding.AutoBinding.UpdateStrategy.READ_WRITE, masterTable, org.jdesktop.beansbinding.ELProperty.create("${selectedElement.socio}"), jLabelSocio, org.jdesktop.beansbinding.BeanProperty.create("text"));
        bindingGroup.addBinding(binding);

        jCBLocalididad.setToolTipText("");
        jCBLocalididad.setEnabled(false);

        binding = org.jdesktop.beansbinding.Bindings.createAutoBinding(org.jdesktop.beansbinding.AutoBinding.UpdateStrategy.READ_WRITE, masterTable, org.jdesktop.beansbinding.ELProperty.create("${selectedElement.localidad}"), jCBLocalididad, org.jdesktop.beansbinding.BeanProperty.create("selectedItem"));
        binding.setSourceUnreadableValue(null);
        binding.setConverter(localidadConverter);
        bindingGroup.addBinding(binding);

        javax.swing.GroupLayout jPanelFormLayout = new javax.swing.GroupLayout(jPanelForm);
        jPanelForm.setLayout(jPanelFormLayout);
        jPanelFormLayout.setHorizontalGroup(
            jPanelFormLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanelFormLayout.createSequentialGroup()
                .addGap(20, 20, 20)
                .addGroup(jPanelFormLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(apellidoLabel)
                    .addComponent(cuilLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 77, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(telefonoLabel)
                    .addComponent(direccionLabel)
                    .addComponent(numSocLabel)
                    .addComponent(documentoLabel)
                    .addComponent(emailLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 69, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabelBaja))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 41, Short.MAX_VALUE)
                .addGroup(jPanelFormLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanelFormLayout.createSequentialGroup()
                        .addComponent(jLEliminado, javax.swing.GroupLayout.PREFERRED_SIZE, 98, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addContainerGap())
                    .addGroup(jPanelFormLayout.createSequentialGroup()
                        .addGroup(jPanelFormLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(numSocField, javax.swing.GroupLayout.PREFERRED_SIZE, 164, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(documentoField, javax.swing.GroupLayout.PREFERRED_SIZE, 164, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(jPanelFormLayout.createSequentialGroup()
                                .addGroup(jPanelFormLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addComponent(apellidoField, javax.swing.GroupLayout.PREFERRED_SIZE, 312, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanelFormLayout.createSequentialGroup()
                                        .addGroup(jPanelFormLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                            .addComponent(telefonoField, javax.swing.GroupLayout.PREFERRED_SIZE, 164, javax.swing.GroupLayout.PREFERRED_SIZE)
                                            .addComponent(cuilField, javax.swing.GroupLayout.PREFERRED_SIZE, 164, javax.swing.GroupLayout.PREFERRED_SIZE))
                                        .addGap(148, 148, 148)))
                                .addGap(12, 12, 12)
                                .addGroup(jPanelFormLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(tipoSocioLabel)
                                    .addComponent(nombreLabel)
                                    .addComponent(sexoLabel)
                                    .addComponent(fechaNacimientoLabel)
                                    .addComponent(celularLabel)))
                            .addGroup(jPanelFormLayout.createSequentialGroup()
                                .addGroup(jPanelFormLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                    .addComponent(direccionField, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 310, Short.MAX_VALUE)
                                    .addComponent(emailField, javax.swing.GroupLayout.Alignment.LEADING))
                                .addGap(18, 18, 18)
                                .addComponent(localidadLabel))
                            .addGroup(jPanelFormLayout.createSequentialGroup()
                                .addComponent(refreshButton, javax.swing.GroupLayout.PREFERRED_SIZE, 83, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(18, 18, 18)
                                .addComponent(saveButton, javax.swing.GroupLayout.PREFERRED_SIZE, 93, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addGroup(jPanelFormLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanelFormLayout.createSequentialGroup()
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 27, Short.MAX_VALUE)
                                .addGroup(jPanelFormLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addGroup(jPanelFormLayout.createSequentialGroup()
                                        .addGroup(jPanelFormLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                            .addComponent(fechaNacimientoField, javax.swing.GroupLayout.DEFAULT_SIZE, 111, Short.MAX_VALUE)
                                            .addComponent(jCBSexo, 0, 1, Short.MAX_VALUE))
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(jButtonFecha, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE))
                                    .addComponent(nombreField, javax.swing.GroupLayout.DEFAULT_SIZE, 360, Short.MAX_VALUE)
                                    .addComponent(jComboTipSoc, javax.swing.GroupLayout.PREFERRED_SIZE, 111, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(celularField, javax.swing.GroupLayout.PREFERRED_SIZE, 164, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(jCBLocalididad, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                                .addContainerGap(38, Short.MAX_VALUE))
                            .addGroup(jPanelFormLayout.createSequentialGroup()
                                .addGap(55, 55, 55)
                                .addComponent(jLabelSocio, javax.swing.GroupLayout.PREFERRED_SIZE, 46, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(0, 0, Short.MAX_VALUE))))))
        );
        jPanelFormLayout.setVerticalGroup(
            jPanelFormLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanelFormLayout.createSequentialGroup()
                .addGroup(jPanelFormLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLEliminado, javax.swing.GroupLayout.PREFERRED_SIZE, 15, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabelBaja))
                .addGroup(jPanelFormLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanelFormLayout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanelFormLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(numSocLabel)
                            .addComponent(numSocField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(tipoSocioLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 27, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jComboTipSoc, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanelFormLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(nombreLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 24, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(nombreField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(apellidoField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(apellidoLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 22, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanelFormLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(documentoLabel)
                            .addGroup(jPanelFormLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                .addComponent(documentoField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(sexoLabel)
                                .addComponent(jCBSexo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanelFormLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanelFormLayout.createSequentialGroup()
                                .addGroup(jPanelFormLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(cuilLabel)
                                    .addComponent(fechaNacimientoLabel))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(telefonoLabel))
                            .addGroup(jPanelFormLayout.createSequentialGroup()
                                .addGroup(jPanelFormLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                    .addComponent(jButtonFecha, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addGroup(jPanelFormLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                        .addComponent(fechaNacimientoField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addComponent(cuilField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                                .addGroup(jPanelFormLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(jPanelFormLayout.createSequentialGroup()
                                        .addGap(3, 3, 3)
                                        .addGroup(jPanelFormLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                            .addComponent(celularLabel)
                                            .addComponent(celularField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanelFormLayout.createSequentialGroup()
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                        .addComponent(telefonoField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                                .addGroup(jPanelFormLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(jPanelFormLayout.createSequentialGroup()
                                        .addGap(0, 0, Short.MAX_VALUE)
                                        .addGroup(jPanelFormLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                            .addComponent(emailField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                            .addComponent(emailLabel)
                                            .addComponent(localidadLabel)))
                                    .addGroup(jPanelFormLayout.createSequentialGroup()
                                        .addComponent(jCBLocalididad, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addGap(0, 0, Short.MAX_VALUE)))))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGroup(jPanelFormLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(direccionLabel)
                            .addComponent(direccionField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanelFormLayout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jLabelSocio, javax.swing.GroupLayout.PREFERRED_SIZE, 15, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(3, 3, 3)))
                .addGroup(jPanelFormLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(refreshButton)
                    .addComponent(saveButton))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        jPanelTabla.setBorder(javax.swing.BorderFactory.createEtchedBorder());

        masterTable.setAutoCreateRowSorter(true);

        org.jdesktop.swingbinding.JTableBinding jTableBinding = org.jdesktop.swingbinding.SwingBindings.createJTableBinding(org.jdesktop.beansbinding.AutoBinding.UpdateStrategy.READ_WRITE, list, masterTable);
        org.jdesktop.swingbinding.JTableBinding.ColumnBinding columnBinding = jTableBinding.addColumnBinding(org.jdesktop.beansbinding.ELProperty.create("${numSoc}"));
        columnBinding.setColumnName("N¬∞ Socio");
        columnBinding.setColumnClass(Integer.class);
        columnBinding.setEditable(false);
        columnBinding = jTableBinding.addColumnBinding(org.jdesktop.beansbinding.ELProperty.create("${apellido}"));
        columnBinding.setColumnName("Apellido");
        columnBinding.setColumnClass(String.class);
        columnBinding.setEditable(false);
        columnBinding = jTableBinding.addColumnBinding(org.jdesktop.beansbinding.ELProperty.create("${nombre}"));
        columnBinding.setColumnName("Nombre");
        columnBinding.setColumnClass(String.class);
        columnBinding.setEditable(false);
        columnBinding = jTableBinding.addColumnBinding(org.jdesktop.beansbinding.ELProperty.create("${documento}"));
        columnBinding.setColumnName("DNI");
        columnBinding.setColumnClass(Integer.class);
        columnBinding.setEditable(false);
        columnBinding = jTableBinding.addColumnBinding(org.jdesktop.beansbinding.ELProperty.create("${sexo}"));
        columnBinding.setColumnName("Sexo");
        columnBinding.setColumnClass(String.class);
        columnBinding.setEditable(false);
        columnBinding = jTableBinding.addColumnBinding(org.jdesktop.beansbinding.ELProperty.create("${cuil}"));
        columnBinding.setColumnName("Cuil");
        columnBinding.setColumnClass(String.class);
        columnBinding.setEditable(false);
        columnBinding = jTableBinding.addColumnBinding(org.jdesktop.beansbinding.ELProperty.create("${fechaNacimiento}"));
        columnBinding.setColumnName("Fecha Naciemiento");
        columnBinding.setColumnClass(java.util.Date.class);
        columnBinding.setEditable(false);
        columnBinding = jTableBinding.addColumnBinding(org.jdesktop.beansbinding.ELProperty.create("${telefono}"));
        columnBinding.setColumnName("Telefono");
        columnBinding.setColumnClass(String.class);
        columnBinding.setEditable(false);
        columnBinding = jTableBinding.addColumnBinding(org.jdesktop.beansbinding.ELProperty.create("${celular}"));
        columnBinding.setColumnName("Celular");
        columnBinding.setColumnClass(String.class);
        columnBinding.setEditable(false);
        columnBinding = jTableBinding.addColumnBinding(org.jdesktop.beansbinding.ELProperty.create("${email}"));
        columnBinding.setColumnName("Email");
        columnBinding.setColumnClass(String.class);
        columnBinding.setEditable(false);
        columnBinding = jTableBinding.addColumnBinding(org.jdesktop.beansbinding.ELProperty.create("${localidad}"));
        columnBinding.setColumnName("Localidad");
        columnBinding.setEditable(false);
        columnBinding = jTableBinding.addColumnBinding(org.jdesktop.beansbinding.ELProperty.create("${direccion}"));
        columnBinding.setColumnName("Direccion");
        columnBinding.setColumnClass(String.class);
        columnBinding.setEditable(false);
        columnBinding = jTableBinding.addColumnBinding(org.jdesktop.beansbinding.ELProperty.create("${idTipoSocio}"));
        columnBinding.setColumnName("Tipo de Socio");
        columnBinding.setEditable(false);
        columnBinding = jTableBinding.addColumnBinding(org.jdesktop.beansbinding.ELProperty.create("${fechaBaja}"));
        columnBinding.setColumnName("Fecha de Baja");
        columnBinding.setColumnClass(java.util.Date.class);
        columnBinding.setEditable(false);
        columnBinding = jTableBinding.addColumnBinding(org.jdesktop.beansbinding.ELProperty.create("${idSocio}"));
        columnBinding.setColumnName("idSocio");
        columnBinding.setColumnClass(Integer.class);
        columnBinding.setEditable(false);
        columnBinding = jTableBinding.addColumnBinding(org.jdesktop.beansbinding.ELProperty.create("${socio}"));
        columnBinding.setColumnName("socio");
        columnBinding.setColumnClass(Boolean.class);
        columnBinding.setEditable(false);
        bindingGroup.addBinding(jTableBinding);
        jTableBinding.bind();
        masterTable.addMouseListener(formListener);
        masterScrollPane.setViewportView(masterTable);
        if (masterTable.getColumnModel().getColumnCount() > 0) {
            masterTable.getColumnModel().getColumn(0).setPreferredWidth(10);
            masterTable.getColumnModel().getColumn(1).setPreferredWidth(70);
            masterTable.getColumnModel().getColumn(2).setPreferredWidth(70);
            masterTable.getColumnModel().getColumn(3).setPreferredWidth(40);
            masterTable.getColumnModel().getColumn(5).setPreferredWidth(65);
            masterTable.getColumnModel().getColumn(11).setPreferredWidth(70);
            masterTable.getColumnModel().getColumn(12).setPreferredWidth(50);
        }

        newButton.setText("Nuevo Socio");
        newButton.addActionListener(formListener);

        deleteButton.setText("Dar de baja");

        binding = org.jdesktop.beansbinding.Bindings.createAutoBinding(org.jdesktop.beansbinding.AutoBinding.UpdateStrategy.READ, masterTable, org.jdesktop.beansbinding.ELProperty.create("${selectedElement != null}"), deleteButton, org.jdesktop.beansbinding.BeanProperty.create("enabled"));
        bindingGroup.addBinding(binding);

        deleteButton.addActionListener(formListener);

        jLabelBuscar.setText("Buscar Socio:");

        jButtonBuscar.setText("Buscar");
        jButtonBuscar.addActionListener(formListener);

        jBVerCuotas.setText("Cuotas del Socio");
        jBVerCuotas.setEnabled(false);
        jBVerCuotas.addActionListener(formListener);

        jButtonAlta.setText("Dar de alta");
        jButtonAlta.setEnabled(false);
        jButtonAlta.addActionListener(formListener);

        jLabel2.setIcon(UtilGraficos.getIconoCuadrado(8, 8, Color.RED));
        jLabel2.setText("Socios dados de baja.");

        jCBBusqueda.addKeyListener(formListener);

        javax.swing.GroupLayout jPanelTablaLayout = new javax.swing.GroupLayout(jPanelTabla);
        jPanelTabla.setLayout(jPanelTablaLayout);
        jPanelTablaLayout.setHorizontalGroup(
            jPanelTablaLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanelTablaLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabelBuscar)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanelTablaLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanelTablaLayout.createSequentialGroup()
                        .addComponent(jCBBusqueda, javax.swing.GroupLayout.PREFERRED_SIZE, 353, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(jButtonBuscar)
                        .addGap(18, 18, 18)
                        .addComponent(jBVerCuotas)
                        .addGap(18, 18, 18)
                        .addComponent(jLabel2))
                    .addGroup(jPanelTablaLayout.createSequentialGroup()
                        .addGap(10, 10, 10)
                        .addComponent(newButton)
                        .addGap(18, 18, 18)
                        .addComponent(deleteButton, javax.swing.GroupLayout.PREFERRED_SIZE, 114, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(jButtonAlta, javax.swing.GroupLayout.PREFERRED_SIZE, 119, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(86, Short.MAX_VALUE))
            .addGroup(jPanelTablaLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(jPanelTablaLayout.createSequentialGroup()
                    .addContainerGap()
                    .addComponent(masterScrollPane, javax.swing.GroupLayout.DEFAULT_SIZE, 907, Short.MAX_VALUE)
                    .addContainerGap()))
        );
        jPanelTablaLayout.setVerticalGroup(
            jPanelTablaLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanelTablaLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanelTablaLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabelBuscar, javax.swing.GroupLayout.PREFERRED_SIZE, 23, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jButtonBuscar)
                    .addComponent(jBVerCuotas)
                    .addComponent(jLabel2)
                    .addComponent(jCBBusqueda, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 233, Short.MAX_VALUE)
                .addGroup(jPanelTablaLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(newButton)
                    .addComponent(deleteButton)
                    .addComponent(jButtonAlta))
                .addContainerGap())
            .addGroup(jPanelTablaLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(jPanelTablaLayout.createSequentialGroup()
                    .addGap(45, 45, 45)
                    .addComponent(masterScrollPane, javax.swing.GroupLayout.PREFERRED_SIZE, 210, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addContainerGap(52, Short.MAX_VALUE)))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jPanelForm, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jPanelTabla, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jPanelTabla, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanelForm, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );

        bindingGroup.bind();
    }

    // Code for dispatching events from components to event handlers.

    private class FormListener implements java.awt.event.ActionListener, java.awt.event.FocusListener, java.awt.event.KeyListener, java.awt.event.MouseListener {
        FormListener() {}
        public void actionPerformed(java.awt.event.ActionEvent evt) {
            if (evt.getSource() == jCBSexo) {
                SociosABM.this.jCBSexoActionPerformed(evt);
            }
            else if (evt.getSource() == jButtonFecha) {
                SociosABM.this.jButtonFechaActionPerformed(evt);
            }
            else if (evt.getSource() == refreshButton) {
                SociosABM.this.refreshButtonActionPerformed(evt);
            }
            else if (evt.getSource() == saveButton) {
                SociosABM.this.saveButtonActionPerformed(evt);
            }
            else if (evt.getSource() == newButton) {
                SociosABM.this.newButtonActionPerformed(evt);
            }
            else if (evt.getSource() == deleteButton) {
                SociosABM.this.deleteButtonActionPerformed(evt);
            }
            else if (evt.getSource() == jButtonBuscar) {
                SociosABM.this.jButtonBuscarActionPerformed(evt);
            }
            else if (evt.getSource() == jBVerCuotas) {
                SociosABM.this.jBVerCuotasActionPerformed(evt);
            }
            else if (evt.getSource() == jButtonAlta) {
                SociosABM.this.jButtonAltaActionPerformed(evt);
            }
        }

        public void focusGained(java.awt.event.FocusEvent evt) {
            if (evt.getSource() == telefonoField) {
                SociosABM.this.telefonoFieldFocusGained(evt);
            }
            else if (evt.getSource() == cuilField) {
                SociosABM.this.cuilFieldFocusGained(evt);
            }
            else if (evt.getSource() == celularField) {
                SociosABM.this.celularFieldFocusGained(evt);
            }
        }

        public void focusLost(java.awt.event.FocusEvent evt) {
            if (evt.getSource() == emailField) {
                SociosABM.this.emailFieldFocusLost(evt);
            }
            else if (evt.getSource() == telefonoField) {
                SociosABM.this.telefonoFieldFocusLost(evt);
            }
            else if (evt.getSource() == celularField) {
                SociosABM.this.celularFieldFocusLost(evt);
            }
        }

        public void keyPressed(java.awt.event.KeyEvent evt) {
            if (evt.getSource() == jCBBusqueda) {
                SociosABM.this.jCBBusquedaKeyPressed(evt);
            }
        }

        public void keyReleased(java.awt.event.KeyEvent evt) {
        }

        public void keyTyped(java.awt.event.KeyEvent evt) {
            if (evt.getSource() == telefonoField) {
                SociosABM.this.telefonoFieldKeyTyped(evt);
            }
            else if (evt.getSource() == cuilField) {
                SociosABM.this.cuilFieldKeyTyped(evt);
            }
            else if (evt.getSource() == numSocField) {
                SociosABM.this.numSocFieldKeyTyped(evt);
            }
            else if (evt.getSource() == documentoField) {
                SociosABM.this.documentoFieldKeyTyped(evt);
            }
            else if (evt.getSource() == celularField) {
                SociosABM.this.celularFieldKeyTyped(evt);
            }
        }

        public void mouseClicked(java.awt.event.MouseEvent evt) {
            if (evt.getSource() == fechaNacimientoField) {
                SociosABM.this.fechaNacimientoFieldMouseClicked(evt);
            }
            else if (evt.getSource() == masterTable) {
                SociosABM.this.masterTableMouseClicked(evt);
            }
        }

        public void mouseEntered(java.awt.event.MouseEvent evt) {
        }

        public void mouseExited(java.awt.event.MouseEvent evt) {
        }

        public void mousePressed(java.awt.event.MouseEvent evt) {
        }

        public void mouseReleased(java.awt.event.MouseEvent evt) {
        }
    }// </editor-fold>//GEN-END:initComponents


    private void deleteButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_deleteButtonActionPerformed
        int reply = JOptionPane.showConfirmDialog(null, "¬øEst√° seguro de dar de baja el registro?", "Eliminacion de Registro", JOptionPane.YES_NO_OPTION);
        if (reply == JOptionPane.YES_OPTION) {
            //        int[] selected = masterTable.getSelectedRows();
            //        List<madreteresacrud.Socios> toRemove = new ArrayList<madreteresacrud.Socios>(selected.length);
            //        for (int idx = 0; idx < selected.length; idx++) {
            //            madreteresacrud.Socios s = list.get(masterTable.convertRowIndexToModel(selected[idx]));
            //            toRemove.add(s);
            //            entityManager.remove(s);
            //        }
            //        list.removeAll(toRemove);
            //Buscamos las cuotas del socio seleccionado
            int selected = masterTable.getSelectedRow();
            int id = Integer.valueOf(masterTable.getValueAt(selected, 14).toString());
            CuotaSocialABM csabm = new CuotaSocialABM(id);
            java.util.Collection lc = csabm.getListaCuotas();
            CuotaSocial cs = new CuotaSocial();
            int idCuota = 0;
            for (Object cuota : lc) {
                cs = (CuotaSocial) cuota;
                if (cs.getFechaPago() == null) {
                    idCuota = cs.getIdCuotaSocial();
                }

            }
            //Preguntamos si adeuda cuotas
            if (idCuota != 0) {
                int ax = JOptionPane.showConfirmDialog(null, "El socio seleccionado adeuda cuotas, desea darlo de baja de todas formas?", "Eliminacion de Registro", JOptionPane.YES_NO_OPTION);
                if (ax == JOptionPane.YES_OPTION) {
                    String patron = "dd/MM/yyyy";
                    SimpleDateFormat formato = new SimpleDateFormat(patron);
                    Date calendario = new Date();
                    jLEliminado.setText(formato.format(calendario));
                    //                setBusqueda();
                    try {
                        entityManager.getTransaction().commit();
                        entityManager.getTransaction().begin();
                    } catch (RollbackException rex) {
                        rex.printStackTrace();
                        entityManager.getTransaction().begin();
                        List<madreteresacrud.Socios> merged = new ArrayList<madreteresacrud.Socios>(list.size());
                        for (madreteresacrud.Socios s : list) {
                            merged.add(entityManager.merge(s));
                        }
                        list.clear();
                        list.addAll(merged);
                    }
                    //Volvemos a cargar la tabla
                    entityManager.getTransaction().rollback();
                    entityManager.getTransaction().begin();
                    java.util.Collection data = query.getResultList();
                    for (Object entity : data) {
                        entityManager.refresh(entity);
                    }
                    list.clear();
                    list.addAll(data);
                    jComboTipSoc.setEnabled(false);
                }
            } else {
                int ax = JOptionPane.showConfirmDialog(null, "Dar de baja el socio seleccionado?", "Eliminacion de Registro", JOptionPane.YES_NO_OPTION);
                if (ax == JOptionPane.YES_OPTION) {
                    String patron = "dd/MM/yyyy";
                    SimpleDateFormat formato = new SimpleDateFormat(patron);
                    Date calendario = new Date();
                    jLEliminado.setText(formato.format(calendario));
                    //                setBusqueda();
                    try {
                        entityManager.getTransaction().commit();
                        entityManager.getTransaction().begin();
                    } catch (RollbackException rex) {
                        rex.printStackTrace();
                        entityManager.getTransaction().begin();
                        List<madreteresacrud.Socios> merged = new ArrayList<madreteresacrud.Socios>(list.size());
                        for (madreteresacrud.Socios s : list) {
                            merged.add(entityManager.merge(s));
                        }
                        list.clear();
                        list.addAll(merged);
                    }

                    //Volvemos a cargar la tabla
                    refrescarForm();
//                    jComboTipSoc.setEnabled(false);
//                    jCBSexo.setEnabled(false);
//                    cuilField.setEnabled(false);
//                    numSocField.setEnabled(false);
                }
            }
        }
    }//GEN-LAST:event_deleteButtonActionPerformed

    private boolean findByDNI(int numDoc) {
        query = entityManager.createQuery("SELECT s FROM Socios s WHERE s.documento=" + numDoc);
        if (query != null) {
            return true;
        } else {
            return false;
        }
    }

    public void setDonanteByDNI(int numDoc, String nombre, String apellido) {
        if (findByDNI(numDoc)) {
            boolean t = true;
            String sql = "UPDATE Socios s SET s.donante = "+ 1 + " WHERE s.documento = " + numDoc;
            entityManager.createQuery(sql).executeUpdate();
            entityManager.getTransaction().commit();
            JOptionPane.showMessageDialog(null, "El socio "+ nombre + apellido + " ha sido registrado como donante");
        }else{
            JOptionPane.showMessageDialog(null, "No se pudo actualizar el registro");
        }
    }

    public Socios ApeYNom(int dni) {
        SociosABM s = new SociosABM();
        for (int i = 0; i < s.list.size(); i++) {
            if (list.get(i).getDocumento() == dni) {
                return list.get(i);
            }
        }
        return null;
    }


    private void newButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_newButtonActionPerformed

        //JOptionPane.showMessageDialog(null, "Debe rellenar todos los campos");       
        refreshButton.setEnabled(true);
        saveButton.setEnabled(true);
        newButton.setEnabled(false);
        jButtonBuscar.setEnabled(false);
        jPanelForm.setEnabled(true);
        masterTable.setEnabled(false);

        madreteresacrud.Socios s = new madreteresacrud.Socios();
        entityManager.persist(s);
        list.add(s);
        int row = list.size() - 1;
        masterTable.setRowSelectionInterval(row, row);
        masterTable.scrollRectToVisible(masterTable.getCellRect(row, 0, true));
        int max = 0;
        for (int i = 0; i < masterTable.getRowCount() - 1; i++) {
            if ((int) masterTable.getValueAt(i, 0) > max) {

                max = (int) masterTable.getValueAt(i, 0);
            }

        }

        numSocField.setText(String.valueOf(max + 1));
        numSocField.requestFocusInWindow();
        jLabelSocio.setText("true");
        numSocField.setEnabled(true);
        apellidoField.setEnabled(true);
        nombreField.setEnabled(true);
        jComboTipSoc.setEnabled(true);
        documentoField.setEnabled(true);
        jCBSexo.setEnabled(true);
        fechaNacimientoField.setEnabled(true);
        telefonoField.setEnabled(true);
        celularField.setEnabled(true);
        cuilField.setEnabled(true);
        emailField.setEnabled(true);
        jCBLocalididad.setEnabled(true);
        direccionField.setEnabled(true);
        deleteButton.setEnabled(false);
        jButtonAlta.setEnabled(false);
        jBVerCuotas.setEnabled(false);

        int ax = JOptionPane.showConfirmDialog(this, "¬øEl socio a ingresar es adherente?", null, JOptionPane.YES_NO_OPTION);
        if (ax == JOptionPane.YES_OPTION) {
            new BuscarAdherente((JFrame) SwingUtilities.getWindowAncestor(this), true, this).setVisible(true);
        }else{
            jCBLocalididad.setSelectedItem("RESISTENCIA - CHACO");
            jCBSexo.setSelectedItem("M");
            jComboTipSoc.setSelectedIndex(0);
        }
    }//GEN-LAST:event_newButtonActionPerformed

    private void masterTableMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_masterTableMouseClicked
        newButton.setEnabled(false);
        activo = false;
        int selected = masterTable.getSelectedRow();
        if (masterTable.getValueAt(selected, 13) != null) {
            //Socios Dados de Baja
            refreshButton.setEnabled(false);
            saveButton.setEnabled(false);
            numSocField.setEnabled(false);
            apellidoField.setEnabled(false);
            nombreField.setEnabled(false);
            jComboTipSoc.setEnabled(false);
            documentoField.setEnabled(false);
            jCBSexo.setEnabled(false);
            fechaNacimientoField.setEnabled(false);
            cuilField.setEnabled(false);
            telefonoField.setEnabled(false);
            celularField.setEnabled(false);
            emailField.setEnabled(false);
            jCBLocalididad.setEnabled(false);
            direccionField.setEnabled(false);
            jLEliminado.setVisible(true);
            jLabelBaja.setVisible(true);
            jButtonAlta.setEnabled(true);
            jButtonFecha.setEnabled(false);
            deleteButton.setEnabled(false);
        } else {
            //Socios Activos
            activo = true;
            jButtonFecha.setEnabled(true);
            numSocField.setEnabled(true);
            numSocField.requestFocusInWindow();
            refreshButton.setEnabled(true);
            saveButton.setEnabled(true);
            apellidoField.setEnabled(true);
            nombreField.setEnabled(true);
            jComboTipSoc.setEnabled(true);
            documentoField.setEnabled(true);
            jCBSexo.setEnabled(true);
            fechaNacimientoField.setEnabled(true);
            telefonoField.setEnabled(true);
            celularField.setEnabled(true);
            cuilField.setEnabled(true);
            emailField.setEnabled(true);
            jCBLocalididad.setEnabled(true);
            direccionField.setEnabled(true);
            jLEliminado.setVisible(false);
            jLabelBaja.setVisible(false);
            jButtonAlta.setEnabled(false);
            deleteButton.setEnabled(true);
        }
        jBVerCuotas.setEnabled(true);
    }//GEN-LAST:event_masterTableMouseClicked
    //Busca y selecciona una fila en la tabla
    private void jButtonBuscarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonBuscarActionPerformed
        buscarSocio();
    }//GEN-LAST:event_jButtonBuscarActionPerformed


    private void jBVerCuotasActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jBVerCuotasActionPerformed
        int selected = masterTable.getSelectedRow();
        int id = Integer.valueOf(masterTable.getValueAt(selected, 14).toString());
        CuotaSocialABM csabm = new CuotaSocialABM(id);
        if (csabm.getListaCuotasDeudas().isEmpty()) {
            JOptionPane.showMessageDialog(null, masterTable.getValueAt(selected, 1).toString() + " " + masterTable.getValueAt(selected, 2).toString() + " no adeuda cuotas.");
        }
        if (activo) {
            JDialog c = new JDialog((Frame) SwingUtilities.getWindowAncestor(this), true);
            c.setTitle("Cuotas de " + masterTable.getValueAt(selected, 1).toString() + " " + masterTable.getValueAt(selected, 2).toString());
            c.setContentPane(csabm);
            c.pack();
            c.setLocationRelativeTo(null);
            c.setVisible(true);
        } else {
            JOptionPane.showMessageDialog(null, "No se puede generar cuotas a usuarios inactivos");
        }
//         JFrame frame = new JFrame("Cuotas de "+masterTable.getValueAt(selected, 0).toString()+" "+masterTable.getValueAt(selected, 1).toString());
//
//        frame.setContentPane(csabm);
//        frame.setDefaultCloseOperation(JFrame.HIDE_ON_CLOSE);
//        frame.pack();
//        frame.setVisible(true);
//        frame.setLocationRelativeTo(null);        

    }//GEN-LAST:event_jBVerCuotasActionPerformed

    private Boolean blancos() {
        if ((documentoField.getText().trim().isEmpty())
                || (apellidoField.getText().trim().isEmpty()
                || (nombreField.getText().trim().isEmpty()))
                || (direccionField.getText().trim().isEmpty())
                || (jCBLocalididad.getItemCount() == 0)) {
            mensaje();
            return true;
        } else {
            return false;
        }
    }

    private void mensaje() {
        String respuesta = "";
        if (documentoField.getText().trim().isEmpty()) {
            respuesta = respuesta + " " + "Documento," + " ";
        }
        if (apellidoField.getText().trim().isEmpty()) {
            respuesta = respuesta + " " + "Apellido," + " ";
        }
        if (nombreField.getText().trim().isEmpty()) {
            respuesta = respuesta + " " + "Nombre," + " ";
        }
        if (direccionField.getText().trim().isEmpty()) {
            respuesta = respuesta + " " + "Direccion," + " ";
        }
        JOptionPane.showMessageDialog(null, "Los campos" + respuesta + "no deberian estar vacios!");
    }


    private void saveButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_saveButtonActionPerformed
        if (!blancos()) {
            try {
                entityManager.getTransaction().commit();
                entityManager.getTransaction().begin();
            } catch (RollbackException rex) {
                rex.printStackTrace();
                entityManager.getTransaction().begin();
                List<madreteresacrud.Socios> merged = new ArrayList<madreteresacrud.Socios>(list.size());
                for (madreteresacrud.Socios s : list) {
                    merged.add(entityManager.merge(s));
                }
                list.clear();
                list.addAll(merged);
            }
            refrescarForm();
        }

    }//GEN-LAST:event_saveButtonActionPerformed

    private void refrescarForm() {
        entityManager.getTransaction().rollback();
        entityManager.getTransaction().begin();
        java.util.Collection data = query.getResultList();
        for (Object entity : data) {
            entityManager.refresh(entity);
        }
        list.clear();
        list.addAll(data);
//        setBusqueda();
        desactivar(false);
        masterTable.setEnabled(true);
    }

    private void desactivar(boolean estado) {
        newButton.setEnabled(!estado);
        jBVerCuotas.setEnabled(estado);
        jButtonBuscar.setEnabled(!estado);
        refreshButton.setEnabled(estado);
        saveButton.setEnabled(estado);
        cuilField.setEnabled(estado);
        celularField.setEnabled(estado);
        jComboTipSoc.setEnabled(estado);
        jCBSexo.setEnabled(estado);
        jCBLocalididad.setEnabled(estado);
        numSocField.setEnabled(estado);
        jButtonFecha.setEnabled(!estado);
        jBVerCuotas.setEnabled(estado);
        jLEliminado.setEnabled(estado);
        jLabelBaja.setEnabled(estado);

    }

    private void refreshButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_refreshButtonActionPerformed
        refrescarForm();
    }//GEN-LAST:event_refreshButtonActionPerformed

    private void jButtonFechaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonFechaActionPerformed
        new Calendario((JFrame) SwingUtilities.getWindowAncestor(this), true, fechaNacimientoField).setVisible(true);
    }//GEN-LAST:event_jButtonFechaActionPerformed

    private void telefonoFieldFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_telefonoFieldFocusGained
        if (telefonoField.getText().trim().isEmpty()) {
            telefonoField.setText("03624");
        }
    }//GEN-LAST:event_telefonoFieldFocusGained

    private void celularFieldFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_celularFieldFocusGained
        if (celularField.getText().trim().isEmpty()) {
            celularField.setText("0362154");
        }
    }//GEN-LAST:event_celularFieldFocusGained

    private void telefonoFieldFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_telefonoFieldFocusLost
        if (telefonoField.getText().trim().length() < 7) {
            telefonoField.setText("");
        }
    }//GEN-LAST:event_telefonoFieldFocusLost

    private void celularFieldFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_celularFieldFocusLost
        if (celularField.getText().trim().length() < 9) {
            celularField.setText("");
        }
    }//GEN-LAST:event_celularFieldFocusLost

    private void documentoFieldKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_documentoFieldKeyTyped
        if ((!Character.isDigit(evt.getKeyChar()) && !Character.isISOControl(evt.getKeyChar())) || (documentoField.getText().trim().length() >= 8))//para permitir el punto && evt.getKeyChar()!='.')
        {
            Toolkit.getDefaultToolkit().beep();
            evt.consume();
        }
    }//GEN-LAST:event_documentoFieldKeyTyped

    private void emailFieldFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_emailFieldFocusLost
        if (!emailField.getText().trim().isEmpty()) {
            Matcher mt;
            Pattern pt_email = Pattern.compile("^[_A-Za-z0-9-\\+]+(\\.[_A-Za-z0-9-]+)*@[A-Za-z0-9-]+(\\.[A-Za-z0-9]+)*(\\.[A-Za-z]{2,})$");
            mt = pt_email.matcher(emailField.getText().trim());
            if (!mt.matches()) {
                JOptionPane.showMessageDialog(null, "El email ingresado no es v√°lido! Deber√≠a ser de la forma (nombre@dominio.com).");
                emailField.requestFocus();

            }
        }
    }//GEN-LAST:event_emailFieldFocusLost

    private void telefonoFieldKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_telefonoFieldKeyTyped
        if ((!Character.isDigit(evt.getKeyChar()) && !Character.isISOControl(evt.getKeyChar())) || (telefonoField.getText().trim().length() >= 11)) {
            Toolkit.getDefaultToolkit().beep();
            evt.consume();
        }
    }//GEN-LAST:event_telefonoFieldKeyTyped

    private void celularFieldKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_celularFieldKeyTyped
        if ((!Character.isDigit(evt.getKeyChar()) && !Character.isISOControl(evt.getKeyChar())) || (celularField.getText().trim().length() >= 13)) {
            Toolkit.getDefaultToolkit().beep();
            evt.consume();
        }
    }//GEN-LAST:event_celularFieldKeyTyped

    private void jButtonAltaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonAltaActionPerformed
        int ax = JOptionPane.showConfirmDialog(null, "Dar de alta el socio seleccionado?", "Alta de Registro", JOptionPane.YES_NO_OPTION);
        if (ax == JOptionPane.YES_OPTION) {
            jLEliminado.setText(null);
            try {
                entityManager.getTransaction().commit();
                entityManager.getTransaction().begin();
            } catch (RollbackException rex) {
                rex.printStackTrace();
                entityManager.getTransaction().begin();
                List<madreteresacrud.Socios> merged = new ArrayList<madreteresacrud.Socios>(list.size());
                for (madreteresacrud.Socios s : list) {
                    merged.add(entityManager.merge(s));
                }
                list.clear();
                list.addAll(merged);
            }
        }
        //Volvemos a cargar la tabla
        refrescarForm();
    }//GEN-LAST:event_jButtonAltaActionPerformed

    private void numSocFieldKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_numSocFieldKeyTyped
        if (!Character.isDigit(evt.getKeyChar()) && !Character.isISOControl(evt.getKeyChar())) {
            Toolkit.getDefaultToolkit().beep();
            evt.consume();
        }
    }//GEN-LAST:event_numSocFieldKeyTyped

    private void cuilFieldFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_cuilFieldFocusGained
        if (!documentoField.getText().isEmpty() && !jCBSexo.getSelectedItem().toString().isEmpty()) {
            String cuil = "";
            String dni = documentoField.getText().trim();
            if (dni.length() == 7) {
                dni = "0" + dni;
            }

            if ("M".equals(jCBSexo.getSelectedItem().toString())) {
                cuil = "20" + dni;
            } else {
                cuil = "27" + dni;
            }
            cuilField.setText(calculaCuil(cuil));
        }
    }//GEN-LAST:event_cuilFieldFocusGained

    private void cuilFieldKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_cuilFieldKeyTyped
        if ((!Character.isDigit(evt.getKeyChar()) && !Character.isISOControl(evt.getKeyChar()) && evt.getKeyChar() != '-') || (cuilField.getText().trim().length() >= 13)) {
            Toolkit.getDefaultToolkit().beep();
            evt.consume();
        }
    }//GEN-LAST:event_cuilFieldKeyTyped

    private void jCBSexoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jCBSexoActionPerformed
//        if (!documentoField.getText().isEmpty() && !sexoField.getSelectedItem().toString().isEmpty()) {
//            String cuil = "";
//            String dni = documentoField.getText().trim();
//            if (dni.length() == 7) {
//                dni = "0" + dni;
//            }
//
//            if ("M".equals(sexoField.getSelectedItem().toString())) {
//                cuil = "20" + dni;
//            } else {
//                cuil = "27" + dni;
//            }
//            cuilField.setText(calculaCuil(cuil));
//        }
    }//GEN-LAST:event_jCBSexoActionPerformed

    private void jCBBusquedaKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jCBBusquedaKeyPressed
        if (evt.getKeyCode() == java.awt.Event.ENTER) {
            buscarSocio();
        }
    }//GEN-LAST:event_jCBBusquedaKeyPressed

    private void fechaNacimientoFieldMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_fechaNacimientoFieldMouseClicked
        new Calendario((JFrame) SwingUtilities.getWindowAncestor(this), true, fechaNacimientoField).setVisible(true);
    }//GEN-LAST:event_fechaNacimientoFieldMouseClicked

    //OBJETO PARA PODER ENLAZAR LA FECHA DESDE LA BD EN EL TEXTFIELD fechaNacimiento
    Converter dateConverter = new Converter<java.util.Date, String>() {
        @Override
        public String convertForward(java.util.Date value) {
            String patron = "dd/MM/yyyy";
            SimpleDateFormat formato = new SimpleDateFormat(patron);
            return formato.format(value);
        }

        @Override
        public java.util.Date convertReverse(String value) {
            try {
                DateFormat df = new SimpleDateFormat("dd/MM/yyyy");
                return df.parse(value);
            } catch (ParseException e) {
                System.err.println("Error de dateConverter: " + e.getMessage());
                return Calendar.getInstance().getTime();
            }
        }
    };

    public java.util.List<Socios> getListaSocios() {

        return query.getResultList();

    }

    private void buscarSocio() {
        String ele = jCBBusqueda.getSelectedItem().toString();
        String[] apeYnom = ele.split(", ");
        String ele1;
        boolean flag=false;
        for (int i = 0; i < masterTable.getRowCount(); i++) {
            ele = masterTable.getValueAt(i, 1).toString().trim();
            ele1 = masterTable.getValueAt(i, 2).toString().trim();            
            if (ele.equals(apeYnom[0].trim()) && ele1.equals(apeYnom[1].trim())) {
                masterTable.changeSelection(i, 1, false, false);
                jBVerCuotas.setEnabled(true);
                int selected = masterTable.getSelectedRow();
                if (masterTable.getValueAt(selected, 13) != null) {
                    numSocField.setEnabled(false);
                    apellidoField.setEnabled(false);
                    nombreField.setEnabled(false);
                    jComboTipSoc.setEnabled(false);
                    documentoField.setEnabled(false);
                    jButtonFecha.setEnabled(false);
                    jCBSexo.setEnabled(false);
                    fechaNacimientoField.setEnabled(false);
                    cuilField.setEnabled(false);
                    telefonoField.setEnabled(false);
                    celularField.setEnabled(false);
                    emailField.setEnabled(false);
                    jCBLocalididad.setEnabled(false);
                    direccionField.setEnabled(false);
                    jLEliminado.setVisible(true);
                    jLabelBaja.setVisible(true);
                    jButtonAlta.setEnabled(true);
                    deleteButton.setEnabled(false);
                } else {
                    jButtonFecha.setEnabled(true);
                    numSocField.setEnabled(true);
                    numSocField.requestFocusInWindow();
                    apellidoField.setEnabled(true);
                    nombreField.setEnabled(true);
                    jComboTipSoc.setEnabled(true);
                    documentoField.setEnabled(true);
                    jCBSexo.setEnabled(true);
                    fechaNacimientoField.setEnabled(true);
                    telefonoField.setEnabled(true);
                    celularField.setEnabled(true);
                    cuilField.setEnabled(true);
                    emailField.setEnabled(true);
                    jCBLocalididad.setEnabled(true);
                    direccionField.setEnabled(true);
                    jLEliminado.setVisible(false);
                    jLabelBaja.setVisible(false);
                    jButtonAlta.setEnabled(false);
                    deleteButton.setEnabled(true);                    
                }
                flag = true;
                break;
            }
        }
        if (!flag) {
            JOptionPane.showMessageDialog(null, "El socio ingresado no es v√°lido!");
        }
    }

    private void setBusqueda() {
//        TextAutoCompleter textAutoCompleter = new TextAutoCompleter(jTFBusqueda);
//        textAutoCompleter.setMode(0);
        //SociosABM socios = new SociosABM();
        java.util.List<Socios> listaSocios = this.getListaSocios();        
        for (Socios socio : listaSocios) {           
            jCBBusqueda.addItem(socio.getApellido().trim() + ", " + socio.getNombre().trim());
//            textAutoCompleter.addItem(soc.getApellido().trim() + ", " + soc.getNombre().trim());

        }
        AutoCompleteDecorator.decorate(this.jCBBusqueda);
    }

    private String calculaCuil(String c) {
        String cuil = null;
        if (!c.isEmpty()) {
            String serie = "5432765432";
            int acum = 0;
            String cuilConcat = "";
            int mod;
            String s;
            String c1;
            for (int i = 0; i < serie.length(); i++) {
                s = "" + serie.charAt(i);
                c1 = "" + c.charAt(i);
                acum = acum + (Integer.valueOf(s) * Integer.valueOf(c1));
            }
            mod = acum % 11;
            if (mod == 0) {
                cuil = c + "0";
            } else if (mod == 1) {
                cuil = c + "9";
            } else {
                int r = 11 - mod;
                cuil = c + r;
            }
            for (int i = 0; i < cuil.length(); i++) {

                if (i == 2 || i == 10) {
                    cuilConcat += "-" + cuil.charAt(i);
                } else {
                    cuilConcat += cuil.charAt(i);
                }

            }
            cuil = cuilConcat;
        }
        return cuil;
    }

    private List<Localidades> getLocalidades() {
        javax.persistence.Query query1;
        String sql = "SELECT l FROM Localidades l";

        query1 = java.beans.Beans.isDesignTime() ? null : entityManager.createQuery(sql);
        List<Localidades> lista = query1.getResultList();
        return lista;

    }

    private void setComboLocalidades() {
        //seteamos el combo de localidades con la lista de todas ellas
        List<Localidades> localidades = getLocalidades();
        for (Localidades objects : localidades) {
            jCBLocalididad.addItem(objects);
        }

        AutoCompleteDecorator.decorate(this.jCBLocalididad);

    }

    private void setComboSexo() {
        jCBSexo.addItem("M");
        jCBSexo.addItem("F");

    }

    private List<TipoSocio> getTipoSocios() {
        javax.persistence.Query query1;
        String sql = "SELECT t FROM TipoSocio t";

        query1 = java.beans.Beans.isDesignTime() ? null : entityManager.createQuery(sql);
        List<TipoSocio> lista = query1.getResultList();
        return lista;

    }

    private void setComboTipoSocio() {
        //Agregamos los tipos de socios al combo
        List<TipoSocio> lista = getTipoSocios();
        for (TipoSocio entity : lista) {
            jComboTipSoc.addItem(entity);
        }
    }

    public static Socios getSocio(int idSocio) {

        String sql = "SELECT s FROM Socios s WHERE s.idSocio=" + idSocio;
        em = java.beans.Beans.isDesignTime() ? null : javax.persistence.Persistence.createEntityManagerFactory("madreTeresaCRUDPU").createEntityManager();
        Query q = java.beans.Beans.isDesignTime() ? null : em.createQuery(sql);
        Socios s = (Socios) q.getSingleResult();

        return s;

    }

    public void setApellidoField(String apellidoField) {
        this.apellidoField.setText(apellidoField);
    }

    public void setCelularField(String celularField) {
        this.celularField.setText(celularField);
    }

    public void setCuilField(String cuilField) {
        this.cuilField.setText(cuilField);
    }

    public void setDireccionField(String direccionField) {
        this.direccionField.setText(direccionField);
    }

    public void setDocumentoField(String documentoField) {
        this.documentoField.setText(documentoField);
    }

    public void setEmailField(String emailField) {
        this.emailField.setText(emailField);
    }

    public void setjCBLocalididad(Localidades jCBLocalididad) {
        this.jCBLocalididad.setSelectedItem(jCBLocalididad);
    }

    public void setjCBSexo(String jCBSexo) {
        this.jCBSexo.setSelectedItem(jCBSexo);
    }

    public void setNombreField(String nombreField) {
        this.nombreField.setText(nombreField);
    }

    public void setTelefonoField(String telefonoField) {
        this.telefonoField.setText(telefonoField);
    }

    Converter localidadConverter = new Converter<Integer, Localidades>() {

        @Override
        public Integer convertReverse(Localidades value) {
            return value.getIdLocalidad();
        }

        @Override
        public Localidades convertForward(Integer value) {
            try {
                return Busquedas.findLocalidad(value);
            } catch (Exception e) {
                System.err.println(e);
                return null;
            }

        }
    };

    Converter tipoSocioConverter = new Converter<Integer, TipoSocio>() {

        @Override
        public Integer convertReverse(TipoSocio value) {
            return value.getIdTipoSocio();
        }

        @Override
        public TipoSocio convertForward(Integer value) {
            try {
                return Busquedas.findTipoSocio(value);
            } catch (Exception e) {
                System.err.println(e);
                return null;
            }

        }
    };


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTextField apellidoField;
    private javax.swing.JLabel apellidoLabel;
    private javax.swing.JTextField celularField;
    private javax.swing.JLabel celularLabel;
    private javax.swing.JTextField cuilField;
    private javax.swing.JLabel cuilLabel;
    private javax.swing.JButton deleteButton;
    private javax.swing.JTextField direccionField;
    private javax.swing.JLabel direccionLabel;
    private javax.swing.JTextField documentoField;
    private javax.swing.JLabel documentoLabel;
    private javax.swing.JTextField emailField;
    private javax.swing.JLabel emailLabel;
    private javax.persistence.EntityManager entityManager;
    private javax.swing.JTextField fechaNacimientoField;
    private javax.swing.JLabel fechaNacimientoLabel;
    private javax.swing.JButton jBVerCuotas;
    private javax.swing.JButton jButtonAlta;
    private javax.swing.JButton jButtonBuscar;
    private javax.swing.JButton jButtonFecha;
    private javax.swing.JComboBox jCBBusqueda;
    private javax.swing.JComboBox jCBLocalididad;
    private javax.swing.JComboBox jCBSexo;
    private javax.swing.JComboBox jComboTipSoc;
    private javax.swing.JLabel jLEliminado;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabelBaja;
    private javax.swing.JLabel jLabelBuscar;
    private javax.swing.JLabel jLabelSocio;
    private javax.swing.JPanel jPanelForm;
    private javax.swing.JPanel jPanelTabla;
    private java.util.List<madreteresacrud.Socios> list;
    private javax.swing.JLabel localidadLabel;
    private javax.swing.JScrollPane masterScrollPane;
    private javax.swing.JTable masterTable;
    private javax.swing.JButton newButton;
    private javax.swing.JTextField nombreField;
    private javax.swing.JLabel nombreLabel;
    private javax.swing.JTextField numSocField;
    private javax.swing.JLabel numSocLabel;
    private javax.persistence.Query query;
    private javax.swing.JButton refreshButton;
    private javax.swing.JButton saveButton;
    private javax.swing.JLabel sexoLabel;
    private javax.swing.JTextField telefonoField;
    private javax.swing.JLabel telefonoLabel;
    private javax.swing.JLabel tipoSocioLabel;
    private org.jdesktop.beansbinding.BindingGroup bindingGroup;
    // End of variables declaration//GEN-END:variables
}
